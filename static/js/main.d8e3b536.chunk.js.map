{"version":3,"sources":["header.js","fetch.js","config.js","dashboard.js","dropdown.js","search.js","App.js","serviceWorker.js","index.js"],"names":["Player","props","url","width","height","playing","loop","muted","controls","className","Header","state","toggleVolume","bind","this","setState","isMuted","icon","faVirus","faHandsWash","faHeadSideMask","faHouseUser","faVolumeMute","faVolumeUp","onClick","React","Component","onFetch","data","callback","showData","api","opt","option","ajax","a","fetch","res","json","showJSONData","Fetch","then","host","key","process","REACT_APP_KEY","urlWorld","urlList","urlCountry","fetchWorld","fetchCountryList","fetchCountry","DashboardItem","num","Confirmed","Recovered","Deaths","type","Dashboard","lastUpdate","confirmed","recovered","deaths","time","timeLocale","Date","toLocaleString","getLastUpdate","prevProps","shouldBeInvisible","visible","Dropdown","countries","currentCountry","btnTxt","color","btnDisabled","ref","createRef","handleClick","handleChange","some","country","name","newFetchCountry","encodedCountry","encodeURI","passCountryData","passToggleDashboard","fakeThrottling","focusInput","e","target","value","current","focus","cd","cooldown","inCooldown","timer","setInterval","clearInterval","onSetCountryData","toggle","onShowDashboard","setTimeout","map","clearTimeout","placeholder","list","id","onChange","required","length","disabled","SearchArea","showDashboard","setCountryData","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d8e3b536.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactPlayer from 'react-player';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faVirus, faHandsWash, faHeadSideMask, faHouseUser, faVolumeUp, faVolumeMute } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Header extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            muted: true\r\n        }\r\n        this.toggleVolume = this.toggleVolume.bind(this);\r\n    }\r\n\r\n    toggleVolume() {\r\n        this.setState(state => ({ muted: !state.muted }));\r\n    }\r\n\r\n    render() {\r\n        const isMuted = this.state.muted;\r\n        return (\r\n            <header className=\"header\">\r\n                <h1 className=\"txt-jumbo\">C<FontAwesomeIcon icon={faVirus} className=\"virus\" />vid-19</h1>\r\n                <div className=\"txt-subjumbo triangle-area\">\r\n                    <p className=\"triangles\">\r\n                        <span className=\"triangle\">Wash <FontAwesomeIcon icon={faHandsWash} className=\"triangle-icon\" /></span>\r\n                        <span className=\"triangle\">Wear <FontAwesomeIcon icon={faHeadSideMask} className=\"triangle-icon\" /></span>\r\n                        <span className=\"triangle\">Stay <FontAwesomeIcon icon={faHouseUser} className=\"triangle-icon\" /></span>\r\n                    </p>\r\n                </div>\r\n                <FontAwesomeIcon icon={isMuted ? faVolumeMute : faVolumeUp} onClick={this.toggleVolume} className=\"video-icon\" />\r\n                <Player muted={isMuted} />\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Player(props) {\r\n    return (\r\n        <ReactPlayer\r\n            url=\"https://www.youtube.com/embed/3tBk7ONm95Q\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            playing\r\n            loop\r\n            muted={props.muted}\r\n            controls={false}\r\n            className=\"video\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default Header;","function Fetch(api) {\r\n    const url = api.url;\r\n    const opt = api.option;\r\n    const ajax = async () => {\r\n        const res = await fetch(url, opt);\r\n        const data = await res.json();\r\n        return data;\r\n    };\r\n    return {\r\n        async showJSONData() {\r\n            const data = await ajax();\r\n            return data;\r\n        }\r\n    }\r\n}\r\n\r\nexport default function onFetch(data, callback) {\r\n    const showData = Fetch(data).showJSONData;\r\n    showData().then(callback);\r\n}\r\n","// Remove it from .gitignore before final push\r\n\r\nconst host = \"covid-19-data.p.rapidapi.com\";\r\nconst key = process.env.REACT_APP_KEY;\r\n\r\nconst urlWorld = `https://${host}/totals?format=json`;\r\nconst urlList = `https://${host}/help/countries?format=json`;\r\nconst urlCountry = `https://${host}/country?format=json&name=`;\r\n\r\nexport const fetchWorld = {\r\n    url: urlWorld,\r\n    option: {\r\n        \"method\": \"GET\",\r\n        \"headers\": {\r\n            \"x-rapidapi-host\": host,\r\n            \"x-rapidapi-key\": key\r\n        }\r\n    }\r\n};\r\n\r\nexport const fetchCountryList = {\r\n    url: urlList,\r\n    option: {\r\n        \"method\": \"GET\",\r\n        \"headers\": {\r\n            \"x-rapidapi-host\": host,\r\n            \"x-rapidapi-key\": key\r\n        }\r\n    }\r\n};\r\n\r\nexport const fetchCountry = {\r\n    url: urlCountry,\r\n    option: {\r\n        \"method\": \"GET\",\r\n        \"headers\": {\r\n            \"x-rapidapi-host\": host,\r\n            \"x-rapidapi-key\": key\r\n        }\r\n    }\r\n};","import React from 'react';\r\n\r\nimport onFetch from './fetch';\r\nimport { fetchWorld } from './config';\r\n\r\nclass Dashboard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {\r\n                lastUpdate: '',\r\n                confirmed: '',\r\n                recovered: '',\r\n                deaths: ''\r\n            }\r\n        };\r\n    }\r\n\r\n    getLastUpdate(time) {\r\n        const timeLocale = new Date(time).toLocaleString('en-CA');\r\n        return time === null ? 'N/A' : `${timeLocale} (EST)`;\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!('data' in this.props)) {\r\n            onFetch(fetchWorld, res => {\r\n                const data = res[0];\r\n                this.setState({\r\n                    data: {\r\n                        lastUpdate: this.getLastUpdate(data.lastUpdate),\r\n                        confirmed: data.confirmed,\r\n                        recovered: data.recovered,\r\n                        deaths: data.deaths\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if ('data' in this.props && this.props.data !== prevProps.data) {\r\n            const data = this.props.data;\r\n            this.setState({\r\n                data: {\r\n                    lastUpdate: this.getLastUpdate(data.lastUpdate),\r\n                    confirmed: data.confirmed,\r\n                    recovered: data.recovered,\r\n                    deaths: data.deaths\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const shouldBeInvisible = 'visible' in this.props && !this.props.visible;\r\n        const lastUpdate = this.state.data.lastUpdate === '' ? 'Loading...' : this.state.data.lastUpdate;\r\n        return (\r\n            <section className={`dashboard-area${shouldBeInvisible ? ' invisible' : ''}`}>\r\n                <p>Last Update: {lastUpdate}</p>\r\n                <div className=\"dashboards\">\r\n                    <DashboardItem num={this.state.data.confirmed} type=\"Confirmed\" />\r\n                    <DashboardItem num={this.state.data.recovered} type=\"Recovered\" />\r\n                    <DashboardItem num={this.state.data.deaths} type=\"Deaths\" />\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nfunction DashboardItem(props) {\r\n    const num = props.num === '' ? 'Loading...' : props.num;\r\n    const dashboardType = {\r\n        Confirmed: 'dashboard-confirmed',\r\n        Recovered: 'dashboard-recovered',\r\n        Deaths: 'dashboard-deaths'\r\n    };\r\n    return (\r\n        <div className={`dashboard ${dashboardType[props.type]}`}>{props.type}: <br /><span>{num}</span></div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\n\r\nimport onFetch from './fetch';\r\nimport { fetchCountryList, fetchCountry } from './config';\r\n\r\nclass Dropdown extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            countries: [],\r\n            currentCountry: '',\r\n            btnTxt: 'Search',\r\n            color: 'green',\r\n            btnDisabled: false\r\n        };\r\n        this.ref = React.createRef();\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleClick() {\r\n        if (this.state.countries.some(country => country.name === this.state.currentCountry)) {\r\n            const newFetchCountry = { ...fetchCountry };\r\n            const encodedCountry = encodeURI(this.state.currentCountry);\r\n            newFetchCountry.url = fetchCountry.url + encodedCountry;\r\n\r\n            onFetch(newFetchCountry, res => {\r\n                const data = res[0];\r\n                this.passCountryData(data);\r\n            });\r\n            this.passToggleDashboard(true);\r\n            this.fakeThrottling(3);\r\n        } else {\r\n            this.setState({\r\n                btnTxt: 'Invalid Value',\r\n                color: 'red',\r\n                btnDisabled: true\r\n            });\r\n            this.focusInput();\r\n        }\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({\r\n            currentCountry: e.target.value,\r\n            btnTxt: 'Search',\r\n            color: 'green',\r\n            btnDisabled: false\r\n        });\r\n        this.passToggleDashboard(false);\r\n    }\r\n\r\n    focusInput() {\r\n        this.ref.current.focus();\r\n    }\r\n\r\n    switchColor(color) {\r\n        this.setState({ color });\r\n    }\r\n\r\n    inCooldown(cd) {\r\n        this.setState({\r\n            btnTxt: `After ${cd}s`,\r\n            color: 'red',\r\n            btnDisabled: true\r\n        });\r\n    }\r\n\r\n    fakeThrottling(cd) {\r\n        const state = this.state;\r\n        let cooldown = cd;\r\n        this.inCooldown(cooldown);\r\n        let timer = setInterval(() => {\r\n            if (cooldown > 1) {\r\n                --cooldown;\r\n                this.inCooldown(cooldown);\r\n            } else {\r\n                clearInterval(timer);\r\n                this.setState(state);\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    passCountryData(data) {\r\n        this.props.onSetCountryData(data);\r\n    }\r\n\r\n    passToggleDashboard(toggle) {\r\n        this.props.onShowDashboard(toggle);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let timer = setTimeout(() => {\r\n            onFetch(fetchCountryList, res => {\r\n                const data = res.map(country => country);\r\n                this.setState({ countries: data })\r\n            });\r\n            clearTimeout(timer);\r\n        }, 2000)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"dropdown-area\">\r\n                <div className=\"dropdown\">\r\n                    <input type=\"search\" placeholder=\"Select Country\" list=\"countries\" name=\"country\" id=\"country\" className={`input input-${this.state.color}`} onChange={this.handleChange} ref={this.ref} />\r\n                    <datalist id=\"countries\" required>{\r\n                        this.state.countries.length ?\r\n                            this.state.countries.map(country => <option key={country.name}>{country.name}</option>) :\r\n                            <option disabled>Loading</option>\r\n                    }\r\n                    </datalist>\r\n                </div>\r\n                <button className={`btn-search btn-search-${this.state.color}`} onClick={this.handleClick} disabled={this.state.btnDisabled} >{this.state.btnTxt}</button>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dropdown;","import React from 'react';\r\n\r\nimport Dropdown from './dropdown';\r\nimport Dashboard from './dashboard';\r\n\r\nclass SearchArea extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {\r\n                lastUpdate: '',\r\n                confirmed: '',\r\n                recovered: '',\r\n                deaths: ''\r\n            },\r\n            showDashboard: false\r\n        }\r\n        this.setCountryData = this.setCountryData.bind(this);\r\n        this.showDashboard = this.showDashboard.bind(this);\r\n    }\r\n\r\n    setCountryData(data) {\r\n        this.setState({\r\n            data: {\r\n                lastUpdate: data.lastUpdate,\r\n                confirmed: data.confirmed,\r\n                recovered: data.recovered,\r\n                deaths: data.deaths\r\n            }\r\n        });\r\n    }\r\n\r\n    showDashboard(toggle) {\r\n        this.setState({ showDashboard: toggle })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Dropdown onSetCountryData={this.setCountryData} onShowDashboard={this.showDashboard} />\r\n                <Dashboard data={this.state.data} visible={this.state.showDashboard} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchArea;","import React from 'react';\r\n\r\nimport Header from './header';\r\nimport Dashboard from './dashboard';\r\nimport SearchArea from './search';\r\n\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <main className=\"container\">\r\n      <Header />\r\n      <article className=\"data-area\">\r\n        <h2 className=\"txt-topic-local\">Worldwide:</h2>\r\n        <Dashboard />\r\n      </article>\r\n      <article className=\"data-area\">\r\n        <h2 className=\"txt-topic-local\">Or by country:</h2>\r\n        <SearchArea />\r\n      </article>\r\n    </main>\r\n\r\n  )\r\n}\r\n\r\nexport default App;\r\n\r\n// res.map issue\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}