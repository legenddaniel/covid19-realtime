{"version":3,"sources":["component/Header.js","util/fetch.js","util/config.js","component/Dashboard.js","component/Dropdown.js","component/Search.js","component/Toast.js","component/App.js","serviceWorker.js","index.js"],"names":["Player","props","url","width","height","playing","loop","muted","controls","className","Header","state","toggleVolume","bind","this","setState","isMuted","icon","onClick","React","Component","onFetch","data","callback","showData","api","opt","option","ajax","a","fetch","res","json","showJSONData","Fetch","then","host","key","process","urlWorld","urlList","urlCountry","fetchWorld","fetchCountryList","fetchCountry","loading","DashboardItem","num","Confirmed","Recovered","Deaths","type","Dashboard","lastUpdate","confirmed","recovered","deaths","time","timeLocale","Date","toLocaleString","getLastUpdate","prevProps","shouldBeInvisible","visible","Dropdown","countries","currentCountry","btnTxt","color","btnDisabled","ref","createRef","handleClick","handleChange","handleBlur","some","country","name","newFetchCountry","encodedCountry","encodeURI","passCountryData","passToggleDashboard","fakeThrottling","focusInput","e","includes","target","value","scrollIntoView","current","focus","cd","cooldown","inCooldown","timer","setInterval","clearInterval","onSetCountryData","toggle","onShowDashboard","setTimeout","map","clearTimeout","placeholder","list","id","onChange","onBlur","required","length","disabled","SearchArea","showDashboard","setCountryData","Toast","detectKey","Swal","mixin","customClass","popup","fire","title","html","position","showConfirmButton","timerProgressBar","showClass","hideClass","onOpen","swal","onmouseenter","stopTimer","onmouseleave","resumeTimer","library","add","faSpinner","faVirus","faHandsWash","faHeadSideMask","faHouseUser","faVolumeUp","faVolumeMute","App","Search","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11f369cd.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactPlayer from 'react-player';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nclass Header extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            muted: true\r\n        }\r\n        this.toggleVolume = this.toggleVolume.bind(this);\r\n    }\r\n\r\n    toggleVolume() {\r\n        this.setState(state => ({ muted: !state.muted }));\r\n    }\r\n\r\n    render() {\r\n        const isMuted = this.state.muted;\r\n        return (\r\n            <header className=\"content-wrapper\">\r\n                <h1 className=\"txt-jumbo\">C<FontAwesomeIcon icon=\"virus\" className=\"virus spin\" />vid-19</h1>\r\n                <div className=\"txt-subjumbo triangle-area\">\r\n                    <p className=\"triangles\">\r\n                        <span className=\"triangle\">Wash <FontAwesomeIcon icon=\"hands-wash\" className=\"triangle-icon\" /></span>\r\n                        <span className=\"triangle\">Wear <FontAwesomeIcon icon=\"head-side-mask\" className=\"triangle-icon\" /></span>\r\n                        <span className=\"triangle\">Stay <FontAwesomeIcon icon=\"house-user\" className=\"triangle-icon\" /></span>\r\n                    </p>\r\n                </div>\r\n                <FontAwesomeIcon icon={isMuted ? 'volume-mute' : 'volume-up'} onClick={this.toggleVolume} className=\"video-icon\" />\r\n                <Player muted={isMuted} />\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Player(props) {\r\n    return (\r\n        <ReactPlayer\r\n            url=\"https://www.youtube.com/embed/3tBk7ONm95Q\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            playing\r\n            loop\r\n            muted={props.muted}\r\n            controls={false}\r\n            className=\"video\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default Header;","function Fetch(api) {\r\n    const url = api.url;\r\n    const opt = api.option;\r\n    const ajax = async () => {\r\n        const res = await fetch(url, opt);\r\n        const data = await res.json();\r\n        return data;\r\n    };\r\n    return {\r\n        async showJSONData() {\r\n            const data = await ajax();\r\n            return data;\r\n        }\r\n    }\r\n}\r\n\r\nexport default function onFetch(data, callback) {\r\n    const showData = Fetch(data).showJSONData;\r\n    showData().then(callback);\r\n}\r\n","const host = \"covid-19-data.p.rapidapi.com\";\r\nconst key = process.env.REACT_APP_KEY;\r\n\r\nconst urlWorld = `https://${host}/totals?format=json`;\r\nconst urlList = `https://${host}/help/countries?format=json`;\r\nconst urlCountry = `https://${host}/country?format=json&name=`;\r\n\r\nexport const fetchWorld = {\r\n    url: urlWorld,\r\n    option: {\r\n        \"method\": \"GET\",\r\n        \"headers\": {\r\n            \"x-rapidapi-host\": host,\r\n            \"x-rapidapi-key\": key\r\n        }\r\n    }\r\n};\r\n\r\nexport const fetchCountryList = {\r\n    url: urlList,\r\n    option: {\r\n        \"method\": \"GET\",\r\n        \"headers\": {\r\n            \"x-rapidapi-host\": host,\r\n            \"x-rapidapi-key\": key\r\n        }\r\n    }\r\n};\r\n\r\nexport const fetchCountry = {\r\n    url: urlCountry,\r\n    option: {\r\n        \"method\": \"GET\",\r\n        \"headers\": {\r\n            \"x-rapidapi-host\": host,\r\n            \"x-rapidapi-key\": key\r\n        }\r\n    }\r\n};","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport onFetch from '../util/fetch';\r\nimport { fetchWorld } from '../util/config';\r\n\r\nconst loading = <span>Loading <FontAwesomeIcon icon=\"spinner\" className=\"spin\" /></span>;\r\n\r\nclass Dashboard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {\r\n                lastUpdate: '',\r\n                confirmed: '',\r\n                recovered: '',\r\n                deaths: ''\r\n            }\r\n        };\r\n    }\r\n\r\n    getLastUpdate(time) {\r\n        const timeLocale = new Date(time).toLocaleString('en-CA');\r\n        return time === null ? 'N/A' : `${timeLocale} (EST)`;\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!('data' in this.props)) {\r\n            onFetch(fetchWorld, res => {\r\n                const data = res[0];\r\n                this.setState({\r\n                    data: {\r\n                        lastUpdate: this.getLastUpdate(data.lastUpdate),\r\n                        confirmed: data.confirmed,\r\n                        recovered: data.recovered,\r\n                        deaths: data.deaths\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if ('data' in this.props && this.props.data !== prevProps.data) {\r\n            const data = this.props.data;\r\n            this.setState({\r\n                data: {\r\n                    lastUpdate: this.getLastUpdate(data.lastUpdate),\r\n                    confirmed: data.confirmed,\r\n                    recovered: data.recovered,\r\n                    deaths: data.deaths\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const shouldBeInvisible = 'visible' in this.props && !this.props.visible;\r\n        const lastUpdate = this.state.data.lastUpdate === '' ? loading : this.state.data.lastUpdate;\r\n        return (\r\n            <section className={`dashboard-area${shouldBeInvisible ? ' invisible' : ''}`}>\r\n                <p>Last Update: {lastUpdate}</p>\r\n                <div className=\"dashboards\">\r\n                    <DashboardItem num={this.state.data.confirmed} type=\"Confirmed\" />\r\n                    <DashboardItem num={this.state.data.recovered} type=\"Recovered\" />\r\n                    <DashboardItem num={this.state.data.deaths} type=\"Deaths\" />\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nfunction DashboardItem(props) {\r\n    const num = props.num === '' ? loading : props.num;\r\n    const dashboardType = {\r\n        Confirmed: 'dashboard-confirmed',\r\n        Recovered: 'dashboard-recovered',\r\n        Deaths: 'dashboard-deaths'\r\n    };\r\n    return (\r\n        <div className={`dashboard ${dashboardType[props.type]}`}>{props.type}: <br /><span>{num}</span></div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\n\r\nimport onFetch from '../util/fetch';\r\nimport { fetchCountryList, fetchCountry } from '../util/config';\r\n\r\nclass Dropdown extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            countries: [],\r\n            currentCountry: '',\r\n            btnTxt: 'Search',\r\n            color: 'green',\r\n            btnDisabled: false\r\n        };\r\n        this.ref = React.createRef();\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleBlur = this.handleBlur.bind(this);\r\n    }\r\n\r\n    handleClick() {\r\n        if (this.state.countries.some(country => country.name === this.state.currentCountry)) {\r\n            const newFetchCountry = { ...fetchCountry };\r\n            const encodedCountry = encodeURI(this.state.currentCountry);\r\n            newFetchCountry.url = fetchCountry.url + encodedCountry;\r\n\r\n            onFetch(newFetchCountry, res => {\r\n                const data = res[0];\r\n                this.passCountryData(data);\r\n            });\r\n            this.passToggleDashboard(true);\r\n            this.fakeThrottling(3);\r\n        } else {\r\n            this.setState({\r\n                btnTxt: 'Invalid Value',\r\n                color: 'red',\r\n                btnDisabled: true\r\n            });\r\n            this.focusInput();\r\n        }\r\n    }\r\n\r\n    handleChange(e) {\r\n        if (!(this.state.btnTxt.includes('After' || 'Invalid'))) {\r\n            this.setState({\r\n                btnTxt: 'Search',\r\n                color: 'green',\r\n                btnDisabled: false\r\n            });\r\n            this.passToggleDashboard(false);\r\n        }\r\n        this.setState({\r\n            currentCountry: e.target.value\r\n        });\r\n    }\r\n\r\n    handleBlur(e) {\r\n        e.target.scrollIntoView();\r\n    }\r\n\r\n    focusInput() {\r\n        this.ref.current.focus();\r\n    }\r\n\r\n    switchColor(color) {\r\n        this.setState({ color });\r\n    }\r\n\r\n    inCooldown(cd) {\r\n        this.setState({\r\n            btnTxt: `After ${cd}s`,\r\n            color: 'red',\r\n            btnDisabled: true\r\n        });\r\n    }\r\n\r\n    fakeThrottling(cd) {\r\n        let cooldown = cd;\r\n        this.inCooldown(cooldown);\r\n        let timer = setInterval(() => {\r\n            if (cooldown > 1) {\r\n                --cooldown;\r\n                this.inCooldown(cooldown);\r\n            } else {\r\n                clearInterval(timer);\r\n                this.setState({\r\n                    btnTxt: 'Search',\r\n                    color: 'green',\r\n                    btnDisabled: false\r\n                });\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    passCountryData(data) {\r\n        this.props.onSetCountryData(data);\r\n    }\r\n\r\n    passToggleDashboard(toggle) {\r\n        this.props.onShowDashboard(toggle);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let timer = setTimeout(() => {\r\n            onFetch(fetchCountryList, res => {\r\n                const data = res.map(country => country);\r\n                this.setState({ countries: data })\r\n            });\r\n            clearTimeout(timer);\r\n        }, 2000)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"dropdown-area\">\r\n                <div className=\"dropdown\">\r\n                    <input type=\"search\" placeholder=\"Select Country\" list=\"countries\" name=\"country\" id=\"country\" className={`input input-${this.state.color}`} onChange={this.handleChange} onBlur={this.handleBlur} ref={this.ref} />\r\n                    <datalist id=\"countries\" required>{\r\n                        this.state.countries.length ?\r\n                            this.state.countries.map(country => <option key={country.name}>{country.name}</option>) :\r\n                            <option disabled>Loading</option>\r\n                    }\r\n                    </datalist>\r\n                </div>\r\n                <button className={`btn-search btn-search-${this.state.color}`} onClick={this.handleClick} disabled={this.state.btnDisabled} >{this.state.btnTxt}</button>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dropdown;","import React from 'react';\r\n\r\nimport Dropdown from './Dropdown';\r\nimport Dashboard from './Dashboard';\r\n\r\nclass SearchArea extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {\r\n                lastUpdate: '',\r\n                confirmed: '',\r\n                recovered: '',\r\n                deaths: ''\r\n            },\r\n            showDashboard: false\r\n        }\r\n        this.setCountryData = this.setCountryData.bind(this);\r\n        this.showDashboard = this.showDashboard.bind(this);\r\n    }\r\n\r\n    setCountryData(data) {\r\n        this.setState({\r\n            data: {\r\n                lastUpdate: data.lastUpdate,\r\n                confirmed: data.confirmed,\r\n                recovered: data.recovered,\r\n                deaths: data.deaths\r\n            }\r\n        });\r\n    }\r\n\r\n    showDashboard(toggle) {\r\n        this.setState({ showDashboard: toggle })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Dropdown onSetCountryData={this.setCountryData} onShowDashboard={this.showDashboard} />\r\n                <Dashboard data={this.state.data} visible={this.state.showDashboard} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchArea;","import React from 'react';\r\nimport Swal from 'sweetalert2'\r\n\r\nimport 'sweetalert2/src/sweetalert2.scss'\r\n\r\nclass Toast extends React.Component {\r\n    componentDidMount() {\r\n        const noKey = !this.detectKey();\r\n        if (noKey) {\r\n            setTimeout(() => {\r\n                const swal = Swal.mixin({ customClass: { popup: 'toast-popup' } });\r\n                swal.fire({\r\n                    title: 'No API key detected!',\r\n                    html: 'You can either go to <a href=\"https://rapidapi.com/Gramzivi/api/covid-19-data/pricing\">RapidAPI</a> and apply for one, <br />or go on without a key',\r\n                    position: 'top',\r\n                    showConfirmButton: false,\r\n                    timer: 5000,\r\n                    timerProgressBar: true,\r\n                    showClass: { popup: 'swal2-show' },\r\n                    hideClass: { popup: 'swal2-hide' },\r\n                    onOpen(swal) {\r\n                        swal.onmouseenter = Swal.stopTimer;\r\n                        swal.onmouseleave = Swal.resumeTimer;\r\n                    }\r\n                })\r\n            }, 5000);\r\n        }\r\n    };\r\n\r\n    detectKey() {\r\n        const key = process.env.REACT_APP_KEY;\r\n        return key === 'Your API Key' ? false : true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Toast;\r\n","import React from 'react';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faSpinner, faVirus, faHandsWash, faHeadSideMask, faHouseUser, faVolumeUp, faVolumeMute } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport Header from './Header';\r\nimport Dashboard from './Dashboard';\r\nimport SearchArea from './Search';\r\nimport Toast from './Toast';\r\n\r\nimport './App.scss';\r\n\r\nlibrary.add(faSpinner, faVirus, faHandsWash, faHeadSideMask, faHouseUser, faVolumeUp, faVolumeMute);\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <Header />\r\n      <main className=\"content-wrapper\">\r\n        <article className=\"data-area\">\r\n          <h2 className=\"txt-topic-local\">Worldwide:</h2>\r\n          <Dashboard />\r\n        </article>\r\n        <article className=\"data-area\">\r\n          <h2 className=\"txt-topic-local\">Or by country:</h2>\r\n          <SearchArea />\r\n        </article>\r\n      </main>\r\n      <Toast />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './component/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}